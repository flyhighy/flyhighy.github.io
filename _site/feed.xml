<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flyhighly Blog</title>
    <description>前端开发小菜</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 19 Feb 2017 22:07:24 +0800</pubDate>
    <lastBuildDate>Sun, 19 Feb 2017 22:07:24 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>浅谈react</title>
        <description>&lt;p&gt;要说近两年最火的技术一定是前端开发，而论前端最火的框架，我认为非react莫属&lt;/p&gt;
&lt;h3 id=&quot;react&quot;&gt;react是什么？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES&lt;/p&gt;
&lt;/blockquote&gt;

&lt;font color=&quot;red&quot;&gt;一个构建ui的JavaScript库&lt;/font&gt;
&lt;p&gt;这是facebook官方对react的解释，很多人认为fb的初衷已经很明确，react更倾向于ui的构建，不擅长或者不应该做较复杂的逻辑运算，而我认为ui及前端，前端也可以有复杂的逻辑，例如表单页面
其实react就是一个mvc的前端框架，一个比jquery更加高级的框架&lt;/p&gt;

&lt;h3 id=&quot;react-1&quot;&gt;react的特点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;函数式编程，jsx
    &lt;ul&gt;
      &lt;li&gt;以往的理念基本都是html，css，js分离，减少js对dom的操作 而jsx语法的出现彻底颠覆这一理念，dom的渲染几乎完全通过js插入&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;virtual dom
    &lt;ul&gt;
      &lt;li&gt;了解前端的都知道，js操作dom是非常消耗性能的，所以要尽量避免这一操作，但是react的函数式编程恰恰与之相悖，所以为了减少对性能的消耗，virtual dom应景而生，通过这一算法大大提高react的性能，成为其成功的决定性因素之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;状态机
    &lt;ul&gt;
      &lt;li&gt;状态机可以说是react的心脏，也就是mvc中的model，视图层的构建完全受其控制，新老状态机的数据的diff是virtual dom的基本原理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jsx，virtual dom，状态机这三者相辅相成，造就了react这一颠覆性的框架&lt;/p&gt;

&lt;h3 id=&quot;react-2&quot;&gt;react成功的关键&lt;/h3&gt;

&lt;p&gt;如果说一个事物的存在必定有其存在的意义，那么成功的事物绝壁有极大地存在意义，react的成功就是因为其解决了前端几个极大的痛点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;组件化
前端组件化的意义我相信每个做过系统前端的人都知道，想了解前端组件化，可以参考之前写过的&lt;a href=&quot;http://flyhighly.com/2017/02/10/cmp/&quot;&gt;前端组件化的一点思考&lt;/a&gt;这篇文章，react的函数式变成让组件分离变得更加简单，由于dom的渲染事件的绑定，以及css都在一个组件完成，使组件封装更加彻底，组件引用也更加简单&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;性能提升
有人认为即使是有了virtual dom，react的性能也不可能比html渲染好，比较react无可避免的对dom操作
页面仅仅是html渲染那么简单吗？现在哪个页面或多或少没有些酷炫的交互，而这些交互无可避免要通过js实现，对于技术牛逼的开发，通过传统方式对一个的页面开发，可以将其性能做到极致，但是并不是每个开发都会将性能做到最好，而且对于一些复杂交互的页面及时做的极致，性能也不见得有多好，这是html，js分离的模式导致
react的出现可以减少前端性能优化的复杂度，大部分页面照着react常规的开发，性能都不会太差&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开发体验的提升
js，htm，css的融合，使得页面开发不用在html，js，css文件来回切换，页面组件的拆分，引入也变得十分简单，前端开发的体验可谓是达到历史之最，这也是很多人对之着迷的原因&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;社区的发展&lt;/h3&gt;

&lt;p&gt;作为前端近两年社区最活跃的技术，基于react的工具，组件库的建设日渐完善，例如webpack打包最初也是为react量身定做，而组件库最有代表性的莫过于蚂蚁金服的&lt;a href=&quot;https://ant.design/index-cn&quot;&gt;ant design&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;react-3&quot;&gt;react的不足&lt;/h3&gt;
&lt;p&gt;人无完人，框架也没有完美的，react也有其不足之处&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;种子文件较大
相比于jquery，kissy等框架，react的种子文件体积显得有些庞大，这与其状态机的维护，dom的管理以及virtual dom算法有关，也是可以理解的，毕竟传统方式的事件绑定和dom操作，react框架都帮忙解决了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更加黑盒
react对于大部分开发者来说更像是一个黑盒，这样的有好有坏，好处是开发者不用关心react具体是怎么实现的，只需要编写上层的代码即可，坏处是不理解其原理无法做更深的性能优化，以及问题的排查&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他
例如组件间的通信数据共享必须通过redux等第三方库来解决，想想也没有更好的办法，因为组件间既要隔离又要通信，只能通过中间层&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;写在最后&lt;/h3&gt;

&lt;p&gt;react的出现让人眼前一亮，其颠覆性的创新也是令人大呼惊奇，可以想象未来必定有其他更好的前端框架出现，而我们要做的便是挣脱束缚，积极创新，并且拥抱新的东西，让自己保持竞争力。&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.02.19&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/19/react/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/react/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>前端组件化的一点思考</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“must do it ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;说在前面&lt;/h3&gt;
&lt;p&gt;近两年组件化也成为一个热词，动不动就页面组件化重构，好像没做过组件化都不意思说自己是做前端的，那么组件到底是如何定义的呢？组件化又解决的是什么问题？&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;什么是组件&lt;/h3&gt;
&lt;p&gt;都在谈组件，那么组件到底该如何定义？我认为组件分为以下两种&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;基础组件
    &lt;ul&gt;
      &lt;li&gt;基础组件即无特定逻辑，例如按钮组件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;特定组件
    &lt;ul&gt;
      &lt;li&gt;特定组件相反有一定特定逻辑，仅适合某些场景，我们经常称之业务组件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是这些组件一定是相互独立，可移植。&lt;/p&gt;

&lt;p&gt;最近了解到身边同学做的一些页面组件化，其实就是将页面划分为小的模块，前后端约定这些模块数据格式，其目的是通过拆分将页面的复杂度降低，减少业务逻辑间的相互影响。我认为应该成为模块化而不是组件化。&lt;/p&gt;

&lt;p&gt;最后一句话阐述组件，组件是完成某些特定功能，可直接移植，有对外提供的api，入参&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;组件化的意义&lt;/h3&gt;

&lt;p&gt;在我看来组件化主要有以下意义&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;降低页面的复杂度，增强页面的可维护性&lt;/li&gt;
  &lt;li&gt;可减少重复开发或者是复制，粘贴的成本，做到代码的复用&lt;/li&gt;
  &lt;li&gt;执行同一个标准，站点保持风格统一&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;技术的发展对组件化的影响&lt;/h3&gt;

&lt;p&gt;从前几年的cmd，amd规范的定义，以及angular，kissy等框架的流行，组件化以及开始慢慢的出现，只不过那时候的组件仅限于特别基础的组件，例如slider，input等！而且组件开发的规范完全凭作者的想法和功底，并没有一个严格的标准，导致组件质量良莠不齐，那时候bower还是作为组件管理工具&lt;/p&gt;

&lt;p&gt;近两年npm的普及，以及react，vue等颠覆以往html，css，js分离的思路的mvvm，mvc框架的出现，让前端组件化变得更加容易一些，因为react，vue的组件可以包含dom渲染部分，这就减少了组件接入的成本，使用者只需要关心组件暴露出的入参和api是怎样？其他dom的渲染，事件的绑定都在组件内完成&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;组件化面临的痛点&lt;/h3&gt;

&lt;p&gt;我们经常会遇到这样的问题，明明组件的样式，交互完全符合页面的需求，但是服务端返回的数据结构或者字段名跟组件所需要的对不上，要是强行使用，则需要前端做一层数据的处理，这样一是影响性能，二是不太好维护，所以大多数情况下我们会选择fork一份组件代码改一下&lt;/p&gt;

&lt;p&gt;fork一份的坏处显而易见，重复开发，新功能增加不能直接升级复用，各干各的，整体风格无法完全统一&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;结语&lt;/h3&gt;

&lt;p&gt;就现阶段来看，组件化是将还是一个长期探索的方向，探索如何将组件复用率达到最大化，组件的粒度该做到多细致？希望能有令人惊喜的突破&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.02.10&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/10/cmp/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/10/cmp/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>前端这几年</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;14年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;这一年，node是最火了，也因为node，前端的生态（包管理npm，bower，脚手架yo，打包工具grunt，gulp）在这一年迅速建立起来，大多数公司和团队形成了适合自己的架构体系。node还带来了前后端分离的尝试，如支付宝前后端分离的思考与实践。&lt;/li&gt;
  &lt;li&gt;这一年，无线端迅猛增加，pc向无线转型的开始，h5兴起，大家争相all in无线。&lt;/li&gt;
  &lt;li&gt;这一年，也是前端框架发展滞后的一年，只有Angular还在发挥着余热，阿里还停留在kissy时代，也就可以想象接下来一年的react和vue是多么的理所当然。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;15年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;这一年，是node成熟，落地，大规模使用的一年。&lt;/li&gt;
  &lt;li&gt;这一年，也是react兴起，顺理成章的弥补了框架薄弱的一环，解决了前端高度组件化，可维护性与降低性能的矛盾，同时兼顾了两者。&lt;/li&gt;
  &lt;li&gt;这一年，react-native初露头角，react-native是前端寻求突破，打开壁垒的一次尝试。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;16年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;历史总是惊人的相似这一年是react，vue成熟，落地，大规模推广使用的一年，h5前端生态和体系已趋于稳定。&lt;/li&gt;
  &lt;li&gt;这一年，react-native在被各种尝试。&lt;/li&gt;
  &lt;li&gt;这一年，也是weex兴起的一年，weex开源，天猫双十一weex的大规模使用。&lt;/li&gt;
  &lt;li&gt;这一年，直播，VR开发初露头角。&lt;/li&gt;
  &lt;li&gt;这一年，微信小程序又给我们带来了新的可能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;17年，哪些是意料之中，又会有怎样的惊喜。。。。。。&lt;/h3&gt;

&lt;p&gt;—— 后记于 2017.01.01&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/09/fe-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/09/fe-2016/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>Hello 2017</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;16年已经悄然过去，一年时间，发生了很多的事情，工作，生活，爱情。总的来说，平平淡淡，没有惊喜也没有惊吓。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;工作，技术&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-1&quot;&gt;关于团队&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一年，是我毕业进入工作进步最快的一年，师兄的转岗让我必须独立面对，团队的动荡以及业务需求的井喷，让我承担了更多的事情
第一个团队，我们最开始只有区区5个人，2人陆续转岗，1人离职，我们第一个团队就这样解体了，作为我第一个加入的团队，给我的成长带来了很多。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;让我开始真正意义的编程，做实际的需求&lt;/li&gt;
  &lt;li&gt;让我熟悉阿里的一切&lt;/li&gt;
  &lt;li&gt;让我承担了更多，激发了我的潜能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第二个团队，也就是现在的团队，一个10左右的前端团队，让我们成为更加正规的前端团队，主管非常的负责，让我变得更加专业，让我学会了，如何去思考，&lt;font color=&quot;red&quot;&gt;思考拿结果，写总结，做规划&lt;/font&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-2&quot;&gt;关于个人&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一年，我疯狂的接需求，敲代码，完成了在别人甚至自己看来不可能完成的事情，上半年的绩效也得到了主管的认可，拿到了想要的结果，总结起来有以下优缺点
优点&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;支撑起大部分核心业务，得到大家的认可，建立起了威信&lt;/li&gt;
  &lt;li&gt;通过疯狂的做需求提升自己的能力&lt;/li&gt;
  &lt;li&gt;积极性极高，得到大家的好评&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;缺点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;技术钻研的不够深入&lt;/li&gt;
  &lt;li&gt;不管是对项目架构还是个人发展，没有做更深入的思考&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-3&quot;&gt;总结&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;总的来说，这一年的表现还是比较满意，如果满分10分，给自己打9分吧！希望17年能够争取拿到9.5分&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-4&quot;&gt;17展望&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;做到以下几点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;多思考，做好总结&lt;/li&gt;
  &lt;li&gt;加强对团队的贡献，包括工具，组件的贡献&lt;/li&gt;
  &lt;li&gt;成功晋升&lt;/li&gt;
  &lt;li&gt;涉猎更多的技术，深入研究某些方面，如nodejs&lt;/li&gt;
  &lt;li&gt;建立自己的博客，并坚持每周一篇高质量分享&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-5&quot;&gt;生活&lt;/h2&gt;
&lt;p&gt;生活方面，平淡无奇，大部分时间还是和彩利同学一起彼此照顾，一起愉快的玩耍，感谢彩利同学的陪伴和照顾&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-6&quot;&gt;关于学习&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;买了几本书都没有看完，倒是看完了几本彩利同学买的书&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;天才在左，疯子在右&lt;/li&gt;
  &lt;li&gt;追风筝的人&lt;/li&gt;
  &lt;li&gt;深入浅出nodejs看了一半&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-7&quot;&gt;关于旅行&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;4月份随团队去了青岛，一座美丽的海边城市，第一次接触真正的大海，非常赞的一段旅行
和彩利同学去了乌镇，一座有名的古镇，但是感觉比较一般，过于商业化了，而且去的时候人太多了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-8&quot;&gt;17展望&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;做到以下几点&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;多带彩利同学去旅行，至少5个城市&lt;/li&gt;
  &lt;li&gt;减肥，健身，至少瘦20斤&lt;/li&gt;
  &lt;li&gt;结婚，完成人生最为重要的一个仪式&lt;/li&gt;
  &lt;li&gt;看书，至少1月看一本&lt;/li&gt;
  &lt;li&gt;买车，买房&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;16已经圆满结束，17继续努力&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.01.01&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/01/hello-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/01/hello-2017/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
