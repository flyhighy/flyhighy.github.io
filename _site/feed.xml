<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flyhighly Blog</title>
    <description>前端开发小菜</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 09 Apr 2017 15:47:12 +0800</pubDate>
    <lastBuildDate>Sun, 09 Apr 2017 15:47:12 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>前端本地存储那些事</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;本地存储作为前端一个常见的功能，现阶段已经有很多场景，例如localStorage缓存静态资源已达到秒出的效果，利用localStorage或者sessionStorage实现两个页面间数据的回传等等。cookie，sessionStorage，localStorage作为前端本地存储的三大法宝，我们有必要精通他们的使用方法&lt;/p&gt;

&lt;h3 id=&quot;cookie&quot;&gt;cookie&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;什么是cookie
    &lt;blockquote&gt;
      &lt;p&gt;cookie 是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求某个页面时，就会发送这个 cookie。你可以使用 JavaScript 来创建和取回 cookie 的值。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;如何使用cookie
    &lt;ul&gt;
      &lt;li&gt;前端可直接查看或者操作本域名下的cookie，如下示例&lt;/li&gt;
      &lt;li&gt;查看cookie
        &lt;ul&gt;
          &lt;li&gt;打开任意页面，在控制台输入document.cookie，可以查看该域名下的左右cookie内容&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;新增cookie
        &lt;ul&gt;
          &lt;li&gt;通过js命令document.cookie = name=value;expires=expiresDate，新增一条cookie记录，其中那么为要设置cookie名称，value为cookie的值，expires为过期时间&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;删除一条cookie
        &lt;ul&gt;
          &lt;li&gt;将该条cookie的过期时间设置为&amp;lt;=0的数&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cookie的域名
    &lt;ul&gt;
      &lt;li&gt;每一个页面只能访问改页面下的cookie，例如www.taobao.com页面不能访问www.baidu.com下的cookie&lt;/li&gt;
      &lt;li&gt;一般情况下二级域名cookie和一级域名的cookie也不能共享，因为域名不完全一致，例如trip.taobao.com不能直接共享www.taobao.com的cookie，但是如果设置了domain为taobao.com则可以实现共享
        &lt;ul&gt;
          &lt;li&gt;document.cookie = name=value;expires=expiresDate;domain=taobao.com&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cookie的限制
    &lt;ul&gt;
      &lt;li&gt;由于每次页面向服务端发起请求都会带上cookie，所以cookie不宜过大&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;localstoragesessionstorage&quot;&gt;localstorage和sessionStorage&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;什么是localStorage和sessionStorage
    &lt;blockquote&gt;
      &lt;p&gt;HTML5 提供了两种在客户端存储数据的新方法，用于解决cookie不能存储大规模数据问题&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;使用方法
    &lt;ul&gt;
      &lt;li&gt;localStorage和sessionStorage的使用方法几乎是完全相同，通过以下api进行增，删，改，查
        &lt;ul&gt;
          &lt;li&gt;setItem，增或改&lt;/li&gt;
          &lt;li&gt;removeItem，删除单个，clear删除全部&lt;/li&gt;
          &lt;li&gt;getItem,查&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;但是由于localStorage和sessionStorage实际上使用的时候是一个js对象，所以可以通过.操作符和[]进行操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;域名限制
    &lt;ul&gt;
      &lt;li&gt;localstorage和sessionStorage都是只能访问当前域名下的，并且域名必须完全一致，包括协议&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;localstorage和sessionStorage的差异
    &lt;ul&gt;
      &lt;li&gt;localStorage是持久化的不会过期，sessionStorage页面关闭即生命周期结束&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;cookie，localStorage，sessionStorage作为前端本地存储的三大法宝，各自发挥着不同的作用&lt;/li&gt;
  &lt;li&gt;cookie更擅长于做关键信息的存储例如登录信息&lt;/li&gt;
  &lt;li&gt;localStorage适合做前端数据持久化，例如缓存一些base64的图片甚至是html，css，js等静态资源，实现页面秒出的效果&lt;/li&gt;
  &lt;li&gt;sessionStorage似乎是为了缓存当前页面数据而生&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—— 后记于 2017.03.24&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Mar 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/24/save-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/24/save-2017/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>egg入门</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;写在前面&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;上一次使用node搭建web服务还要追溯到大四的时候，那时候最风靡的框架当属express，短短两年express却已经被新起的koa替代，回想起来，恍如隔世，只能说前端变化太快了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;egg&quot;&gt;egg是什么？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Egg.js 为企业级框架和应用而生，我们希望由 Egg.js 孕育出更多上层框架，帮助开发团队和开发人员降低开发和维护成本&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上是官方对egg的定义，egg是阿里的一个开源项目，以koa为基础，做了封装和扩展&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;环境搭建&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;node版本要求6.x&lt;/li&gt;
  &lt;li&gt;node –version检测版本号&lt;/li&gt;
  &lt;li&gt;通过安装sudo npm install -g n，来管理node版本&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;亲测6.0.0好使&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;安装egg，初始化项目
    &lt;ul&gt;
      &lt;li&gt;npm i egg-init -g&lt;/li&gt;
      &lt;li&gt;egg-init egg-example –type=simple&lt;/li&gt;
      &lt;li&gt;cd egg-example&lt;/li&gt;
      &lt;li&gt;npm i&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;启动项目
    &lt;ul&gt;
      &lt;li&gt;npm run dev&lt;/li&gt;
      &lt;li&gt;在浏览器中打开 localhost:7001&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;目录结构&lt;/h3&gt;

&lt;p&gt;egg-project&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.js 用于自定义启动时的初始化工作，也就是项目启动的入口&lt;/li&gt;
  &lt;li&gt;config，配置文件目录&lt;/li&gt;
  &lt;li&gt;app核心目录，也是我们经常操作的目录
    &lt;ul&gt;
      &lt;li&gt;router，设置路由，及访问url时对应的规则，服务分发&lt;/li&gt;
      &lt;li&gt;controller，用于解析请求，并返回结果&lt;/li&gt;
      &lt;li&gt;public，用于存放静态资源，例如css，js等&lt;/li&gt;
      &lt;li&gt;view，用于存放渲染模板&lt;/li&gt;
      &lt;li&gt;middleware，用于编写中间件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他请参考&lt;a href=&quot;https://eggjs.org/zh-cn/basics/structure.html&quot;&gt;egg目录结构说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;思考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;从express到koa，egg，框架为开发者做的越来越多，固定的目录结构，规则。给我的感觉是node框架越来越像java等成熟框架，开发者只需要照着规则做就行，这也许就是js的未来，越来越专业，越来越呆板！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—— 后记于 2017.03.19&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Mar 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/19/egg1-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/19/egg1-2017/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>初识TypeScript</title>
        <description>&lt;h3 id=&quot;typescript&quot;&gt;什么是TypeScript&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;TypeScript，简称ts，是微软开发的一个JavaScript转译语言，且是JavaScript的超集，最终将会编译为JavaScript语言&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;开发准备&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;npm install -g typescript安装转译器&lt;/li&gt;
  &lt;li&gt;安装完成后我们就可以使用 TypeScript 编译器，名称叫 tsc，可将编译结果生成 js 文件，使用如下命令
    &lt;blockquote&gt;
      &lt;p&gt;tsc filename.ts&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ts&quot;&gt;TS几种重要的特性&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;类型注解&lt;/li&gt;
  &lt;li&gt;接口 interface&lt;/li&gt;
  &lt;li&gt;类 class&lt;/li&gt;
  &lt;li&gt;模块 module&lt;/li&gt;
  &lt;li&gt;编译时检查 properly checked&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;特性说明和示例&lt;/h3&gt;
&lt;h4 id=&quot;section-2&quot;&gt;类型注解&lt;/h4&gt;
&lt;p&gt;ts有以下几种基础类型&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;Number&lt;/li&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;Array&lt;/li&gt;
  &lt;li&gt;Enum&lt;/li&gt;
  &lt;li&gt;Any&lt;/li&gt;
  &lt;li&gt;Void&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ts提供类型注解用于编译时检查，是可选的，注意是&lt;font color=&quot;red&quot;&gt;编译时检查&lt;/font&gt;，也就是说可以理解为是一种开发中的语法检查，对运行时是无作用的
&lt;img src=&quot;../../../../img/type.png&quot; alt=&quot;示例&quot; /&gt;
以上定义了三个变量a，b，c。a注解是number类型，b是字符串，c没有规定类型。
此时a，b很好理解，必须是规定的类型，编译时会对赋值类型进行检查，如果赋值为非规定类型，则会抛出以下错误
&lt;img src=&quot;../../../../img/typeerror.png&quot; alt=&quot;示例&quot; /&gt;
对于c来说，没有定义类型，所以它可以赋值任何类型的值，tsc编译时，会对其类型进行推断，无法推断的情况下会认为它是空对象类型，{}。&lt;/p&gt;

&lt;h4 id=&quot;interface&quot;&gt;接口，interface&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;TypeScript的核心原则之一就是类型检查，重点对其所有的值进行检查。及我们常说的“鸭式辩型”或者称之为“子类型结构化”，而接口正是充当了类型定义的这一角色（这里所说的类型是基础类型组成的新的自定义复杂类型），另外它还是编写代码中以及和其他项目一种极其有力的约定，或者称为规范。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../../../../img/inter0.png&quot; alt=&quot;示例&quot; /&gt;
以上示例中，printLabel函数规定参数了labelledObj必须有类型为string的label字段，编译时会对其进行检查，让我们看一下用interface时如何实现的
&lt;img src=&quot;../../../../img/inter1.png&quot; alt=&quot;示例&quot; /&gt;
两种写法来看，用interface明显更加清晰，可靠。
另外正如“鸭式辩型”一样，interface类型检测只会检查所要求的结构，字段是否满足，其他多余并不care，顺序也不会进行检查&lt;/p&gt;

&lt;p&gt;另外下面的这种用法，表示不是强制要求，即可以没有，有的话类型必须对
&lt;img src=&quot;../../../../img/inter2.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;class---module&quot;&gt;类，class 和 模块 module&lt;/h4&gt;
&lt;p&gt;没有什么惊艳之处，es6已经支持class，module的写法，ts增加了一些新的特性，例如照抄java的public,private,protected的类属性的限制，以及抽象类等&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;写在最后&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;JavaScript的最大优点是灵活，最大的缺点是太灵活&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;弱类型，异常处理，动态编译造成JavaScript天生就是一门灵活的语言。好的开发者将JavaScript运用的淋漓尽致，一般的开发者被JavaScript玩弄于鼓掌之中或是停留在表皮。
严格模式，es6的出现以及eslint的使用，都是JavaScript开发者规范其写法，以及规避异常的方式，TypeScript也不例外。类型检查，严谨的约定，清晰的结构化让TypeScript显得更加的像java那样正规，严谨。
interface不同于java用于类去实现，而作为一种自定义的复杂类型让代码结构变得构架清晰，同时利于类型检查和模块接入，让人眼前一亮。
作为一中灵活性极大地语言，TypeScript想要让开发者特放弃这种灵活，在业界普及，几乎不太可能。所以更加期待es7或者是es8能够看到这些变化！&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;相关参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://typescript.codeplex.com/documentation&quot;&gt;TypeScript官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhongsp.gitbooks.io/typescript-handbook/content/index.html&quot;&gt;TypeScript中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 11 Mar 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/11/ts/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/11/ts/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>时刻保持危机感</title>
        <description>&lt;p&gt;昨天在网上看到了一篇“愤激贴”，女主是公司8年的老员工，结果上级25秒的手机通话宣告她失业了，接下来是账号被封，卡被冻结，离职流程迅速被走完。且不知道具体细节或者内幕如何，但是这件事带给我了很大的震撼。我意识到，作为一个打工仔，我们随时面临着被辞退。&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin:0&quot; src=&quot;../../../../img/weijigan.jpeg&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于人生来说，你现在的职业就是A计划，应该努力追求职业成功。但是，也要做好两手准备，万一A计划失败，还需要一个B计划，对自己的退路有所安排。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是阮一峰老师的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/03/plan-b.html&quot;&gt;你的B计划在哪里？&lt;/a&gt;的一段话，看到内网这位女主的经历，我首先想到了这篇文章，在现实工作中，我们有没有制定自己的plan B？反正我是没有&lt;/p&gt;

&lt;p&gt;我开始回忆自己的职场之路。。。&lt;/p&gt;

&lt;p&gt;我是2015年7月毕业，进入阿里巴巴，当时的我并没有迅速的进入状态，满足于自己做的一些小事，也可能是跟当时团队的发展有关，那时并没有到现在这么快的节奏&lt;/p&gt;

&lt;p&gt;直到实习转正的时候，虽然没有被卡，但是主管的评价是没有形成独当一面。what the fuck？这是我当时的想法，首先是自己觉得表现的还可以，其次是并为什么这三个月，不管是我的师兄还是主管都没有找我聊过这个事情。其实现在看来，事实就是只有自己对自己负责，别人只会看结果&lt;/p&gt;

&lt;p&gt;接下来的一年多，我对自己永远是200%的要求，虽然现在我只是个小p5，但是我希望对自己的p6+，甚至的p7的要求，这也是自己时刻保持危机感的一种激励方式&lt;/p&gt;

&lt;p&gt;我们没有办法控制外界的变化，但是有一条规则是永远试用的，那就是通过学习来充实自己，保持竞争力。&lt;/p&gt;

&lt;p&gt;是时候考虑制定自己的plan B，plan C了&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.02.19&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/25/planb/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/25/planb/</guid>
        
        <category>感悟</category>
        
        
      </item>
    
      <item>
        <title>浅谈react</title>
        <description>&lt;p&gt;要说近两年最火的技术一定是前端开发，而论前端最火的框架，我认为非react莫属&lt;/p&gt;
&lt;h3 id=&quot;react&quot;&gt;react是什么？&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES&lt;/p&gt;
&lt;/blockquote&gt;

&lt;font color=&quot;red&quot;&gt;一个构建ui的JavaScript库&lt;/font&gt;
&lt;p&gt;这是facebook官方对react的解释，很多人认为fb的初衷已经很明确，react更倾向于ui的构建，不擅长或者不应该做较复杂的逻辑运算，而我认为ui及前端，前端也可以有复杂的逻辑，例如表单页面
其实react就是一个mvc的前端框架，一个比jquery更加高级的框架&lt;/p&gt;

&lt;h3 id=&quot;react-1&quot;&gt;react的特点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;函数式编程，jsx
    &lt;ul&gt;
      &lt;li&gt;以往的理念基本都是html，css，js分离，减少js对dom的操作 而jsx语法的出现彻底颠覆这一理念，dom的渲染几乎完全通过js插入&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;virtual dom
    &lt;ul&gt;
      &lt;li&gt;了解前端的都知道，js操作dom是非常消耗性能的，所以要尽量避免这一操作，但是react的函数式编程恰恰与之相悖，所以为了减少对性能的消耗，virtual dom应景而生，通过这一算法大大提高react的性能，成为其成功的决定性因素之一&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;状态机
    &lt;ul&gt;
      &lt;li&gt;状态机可以说是react的心脏，也就是mvc中的model，视图层的构建完全受其控制，新老状态机的数据的diff是virtual dom的基本原理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jsx，virtual dom，状态机这三者相辅相成，造就了react这一颠覆性的框架&lt;/p&gt;

&lt;h3 id=&quot;react-2&quot;&gt;react成功的关键&lt;/h3&gt;

&lt;p&gt;如果说一个事物的存在必定有其存在的意义，那么成功的事物绝壁有极大地存在意义，react的成功就是因为其解决了前端几个极大的痛点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;组件化
前端组件化的意义我相信每个做过系统前端的人都知道，想了解前端组件化，可以参考之前写过的&lt;a href=&quot;http://flyhighly.com/2017/02/10/cmp/&quot;&gt;前端组件化的一点思考&lt;/a&gt;这篇文章，react的函数式变成让组件分离变得更加简单，由于dom的渲染事件的绑定，以及css都在一个组件完成，使组件封装更加彻底，组件引用也更加简单&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;性能提升
有人认为即使是有了virtual dom，react的性能也不可能比html渲染好，比较react无可避免的对dom操作
页面仅仅是html渲染那么简单吗？现在哪个页面或多或少没有些酷炫的交互，而这些交互无可避免要通过js实现，对于技术牛逼的开发，通过传统方式对一个的页面开发，可以将其性能做到极致，但是并不是每个开发都会将性能做到最好，而且对于一些复杂交互的页面及时做的极致，性能也不见得有多好，这是html，js分离的模式导致
react的出现可以减少前端性能优化的复杂度，大部分页面照着react常规的开发，性能都不会太差&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开发体验的提升
js，htm，css的融合，使得页面开发不用在html，js，css文件来回切换，页面组件的拆分，引入也变得十分简单，前端开发的体验可谓是达到历史之最，这也是很多人对之着迷的原因&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;社区的发展&lt;/h3&gt;

&lt;p&gt;作为前端近两年社区最活跃的技术，基于react的工具，组件库的建设日渐完善，例如webpack打包最初也是为react量身定做，而组件库最有代表性的莫过于蚂蚁金服的&lt;a href=&quot;https://ant.design/index-cn&quot;&gt;ant design&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;react-3&quot;&gt;react的不足&lt;/h3&gt;
&lt;p&gt;人无完人，框架也没有完美的，react也有其不足之处&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;种子文件较大
相比于jquery，kissy等框架，react的种子文件体积显得有些庞大，这与其状态机的维护，dom的管理以及virtual dom算法有关，也是可以理解的，毕竟传统方式的事件绑定和dom操作，react框架都帮忙解决了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更加黑盒
react对于大部分开发者来说更像是一个黑盒，这样的有好有坏，好处是开发者不用关心react具体是怎么实现的，只需要编写上层的代码即可，坏处是不理解其原理无法做更深的性能优化，以及问题的排查&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他
例如组件间的通信数据共享必须通过redux等第三方库来解决，想想也没有更好的办法，因为组件间既要隔离又要通信，只能通过中间层&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;写在最后&lt;/h3&gt;

&lt;p&gt;react的出现让人眼前一亮，其颠覆性的创新也是令人大呼惊奇，可以想象未来必定有其他更好的前端框架出现，而我们要做的便是挣脱束缚，积极创新，并且拥抱新的东西，让自己保持竞争力。&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.02.19&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/19/react/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/react/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>前端组件化的一点思考</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“must do it ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;说在前面&lt;/h3&gt;
&lt;p&gt;近两年组件化也成为一个热词，动不动就页面组件化重构，好像没做过组件化都不意思说自己是做前端的，那么组件到底是如何定义的呢？组件化又解决的是什么问题？&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;什么是组件&lt;/h3&gt;
&lt;p&gt;都在谈组件，那么组件到底该如何定义？我认为组件分为以下两种&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;基础组件
    &lt;ul&gt;
      &lt;li&gt;基础组件即无特定逻辑，例如按钮组件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;特定组件
    &lt;ul&gt;
      &lt;li&gt;特定组件相反有一定特定逻辑，仅适合某些场景，我们经常称之业务组件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是这些组件一定是相互独立，可移植。&lt;/p&gt;

&lt;p&gt;最近了解到身边同学做的一些页面组件化，其实就是将页面划分为小的模块，前后端约定这些模块数据格式，其目的是通过拆分将页面的复杂度降低，减少业务逻辑间的相互影响。我认为应该成为模块化而不是组件化。&lt;/p&gt;

&lt;p&gt;最后一句话阐述组件，组件是完成某些特定功能，可直接移植，有对外提供的api，入参&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;组件化的意义&lt;/h3&gt;

&lt;p&gt;在我看来组件化主要有以下意义&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;降低页面的复杂度，增强页面的可维护性&lt;/li&gt;
  &lt;li&gt;可减少重复开发或者是复制，粘贴的成本，做到代码的复用&lt;/li&gt;
  &lt;li&gt;执行同一个标准，站点保持风格统一&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;技术的发展对组件化的影响&lt;/h3&gt;

&lt;p&gt;从前几年的cmd，amd规范的定义，以及angular，kissy等框架的流行，组件化以及开始慢慢的出现，只不过那时候的组件仅限于特别基础的组件，例如slider，input等！而且组件开发的规范完全凭作者的想法和功底，并没有一个严格的标准，导致组件质量良莠不齐，那时候bower还是作为组件管理工具&lt;/p&gt;

&lt;p&gt;近两年npm的普及，以及react，vue等颠覆以往html，css，js分离的思路的mvvm，mvc框架的出现，让前端组件化变得更加容易一些，因为react，vue的组件可以包含dom渲染部分，这就减少了组件接入的成本，使用者只需要关心组件暴露出的入参和api是怎样？其他dom的渲染，事件的绑定都在组件内完成&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;组件化面临的痛点&lt;/h3&gt;

&lt;p&gt;我们经常会遇到这样的问题，明明组件的样式，交互完全符合页面的需求，但是服务端返回的数据结构或者字段名跟组件所需要的对不上，要是强行使用，则需要前端做一层数据的处理，这样一是影响性能，二是不太好维护，所以大多数情况下我们会选择fork一份组件代码改一下&lt;/p&gt;

&lt;p&gt;fork一份的坏处显而易见，重复开发，新功能增加不能直接升级复用，各干各的，整体风格无法完全统一&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;结语&lt;/h3&gt;

&lt;p&gt;就现阶段来看，组件化是将还是一个长期探索的方向，探索如何将组件复用率达到最大化，组件的粒度该做到多细致？希望能有令人惊喜的突破&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.02.10&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/10/cmp/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/10/cmp/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>前端这几年</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;14年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;这一年，node是最火了，也因为node，前端的生态（包管理npm，bower，脚手架yo，打包工具grunt，gulp）在这一年迅速建立起来，大多数公司和团队形成了适合自己的架构体系。node还带来了前后端分离的尝试，如支付宝前后端分离的思考与实践。&lt;/li&gt;
  &lt;li&gt;这一年，无线端迅猛增加，pc向无线转型的开始，h5兴起，大家争相all in无线。&lt;/li&gt;
  &lt;li&gt;这一年，也是前端框架发展滞后的一年，只有Angular还在发挥着余热，阿里还停留在kissy时代，也就可以想象接下来一年的react和vue是多么的理所当然。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;15年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;这一年，是node成熟，落地，大规模使用的一年。&lt;/li&gt;
  &lt;li&gt;这一年，也是react兴起，顺理成章的弥补了框架薄弱的一环，解决了前端高度组件化，可维护性与降低性能的矛盾，同时兼顾了两者。&lt;/li&gt;
  &lt;li&gt;这一年，react-native初露头角，react-native是前端寻求突破，打开壁垒的一次尝试。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;16年&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;历史总是惊人的相似这一年是react，vue成熟，落地，大规模推广使用的一年，h5前端生态和体系已趋于稳定。&lt;/li&gt;
  &lt;li&gt;这一年，react-native在被各种尝试。&lt;/li&gt;
  &lt;li&gt;这一年，也是weex兴起的一年，weex开源，天猫双十一weex的大规模使用。&lt;/li&gt;
  &lt;li&gt;这一年，直播，VR开发初露头角。&lt;/li&gt;
  &lt;li&gt;这一年，微信小程序又给我们带来了新的可能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;17年，哪些是意料之中，又会有怎样的惊喜。。。。。。&lt;/h3&gt;

&lt;p&gt;—— 后记于 2017.01.01&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Feb 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/09/fe-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/09/fe-2016/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>正则表达式这一趴</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;为什么会将这一趴，因为本人长时间负责交易页面，及表单页面，正则表达式的使用非常频繁，无奈掌握不牢固，每次都要百度一下，借此机会学习一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;简介&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;正则表达式是一个匹配字符串的规则，对字符串进行检测，从而判断字符串是否满足某种规则或者提取出符合某种规则的子字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;示例&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;邮箱校验
    &lt;ul&gt;
      &lt;li&gt;11789873@qq.com,zhangsan@163.com,lisi.ly@gmail.com，qq邮箱，163邮箱和谷歌邮箱是我们常用的三种邮箱，如何校验一个字符串是不是一个邮箱地址？首先我们要找到匹配邮箱的这一规则&lt;/li&gt;
      &lt;li&gt;根据我们了解，邮箱地址一般分为三个部分，分别是用户名，邮箱名，域名。其中邮箱名和邮箱类型由@符号分隔，邮箱类型和域名由.符号分隔，这三个部分分别又有哪些约束
        &lt;ul&gt;
          &lt;li&gt;用户名：qq邮箱要求是由3-18个英文、数字、点、减号、下划线组成，163邮箱要求是6~18个字符，可使用字母、数字、下划线，需以字母开头&lt;/li&gt;
          &lt;li&gt;邮箱名：字母或者数字，常见的都在2-5位，但不排除有像alibaba-inc这样比较长的名称&lt;/li&gt;
          &lt;li&gt;域名：常见的邮箱域名是.com，不排除有域名为其他.cn,.net等邮箱，域名通常只能是2-8位的字母&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;根据以上分析，可以得到邮箱校验的正则表达式，(\w|.|-|_){3,18}@\w{2,5}.\w{2,8}&lt;/li&gt;
      &lt;li&gt;当然这只是个简单的校验，主要是避免用户输入时简单格式错误，有些情况即使错误也能校验通过，例如119000@tr.oo，据我们所知是没名称为tr的邮箱，更没有oo域名，当然要做的更严谨，域名是可以穷举出来校验，但是邮箱名就不好穷举了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;正则语法之特殊字符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;特殊字符，所谓特殊字符，就是一些有特殊含义的字符，例如上述邮箱校验中的{和|，但同时它们也是种字符，有时也需要匹配，下表是正则中的特殊字符含义&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特殊字符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配字符串开始的位置，另外在[中使用表示不接受该字符集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;常用来匹配字符串的结尾部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;()&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;标志表达式的开始和结束位置。子表达式可以获取供以后使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配前面的表达式0到1次，例如[0-9]?,表示匹配0到1个数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配前面的表达式0到多次，例如[0-9]*,表示匹配0个到多个数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配前面的表达式1到多次，例如[0-9]+,表示匹配1个到多个数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配除\n换行符的任何字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;标记一个中括号表达式的开始&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;| 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\’ 匹配 “&quot;，而&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;限定符开始&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;指明两项之间的一个选择，可以理解为或表达式的功能&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;以上特殊字符及在正则中有着特殊的语法，要想匹配上述特殊字符，请在特殊字符前面加\，此时正则表达式会将其当做普通字符匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;正则语法之限定符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;限定符是指定正则表达式的一个子规则必须出现几次才能满足条件，总共有?，&lt;em&gt;，+，{n}，{n,}，{m,n}。其中？，&lt;/em&gt;，+在特殊在特殊字符中已经介绍过，下面介绍其他几种&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;限定符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;{n}&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示匹配n次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{n,}&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示匹配n次及以上&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{m,n}&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;表示匹配m次及以上，且n次及以下&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;例如邮箱正则中的用户名，邮箱名，域名有用到{m,n}这一限定符&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;其他常用字符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;除了特殊字符和限定字符，还有其他一些常用的字符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配数字，等价于[0-9]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配非数，等价于 [^0-9]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\W&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]‘。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-5&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在JavaScript中有这样一种理论叫做“鸭式辩型”，即会像鸭子一样呱呱叫，会游泳的就当作是鸭子。这一理论存在的原因和js的弱类型有关系，试想一下，要确定某个变量是不是类array类型，其实代码层面是没法直接检测的，所以我们认为它有array的某些特性，例如有length熟悉，map方法，即将它当作array类型。&lt;/li&gt;
  &lt;li&gt;正则表达式我认为和“鸭式辩型”有异曲同工之处，只要通过某个正则表达式的校验，即认为该字符串满足某种特殊的规则，有时候用好正则能够非常优雅和高效&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—— 后记于 2017.04.09&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/01/regex-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/01/regex-2017/</guid>
        
        <category>前端</category>
        
        
      </item>
    
      <item>
        <title>Hello 2017</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;16年已经悄然过去，一年时间，发生了很多的事情，工作，生活，爱情。总的来说，平平淡淡，没有惊喜也没有惊吓。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;工作，技术&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-1&quot;&gt;关于团队&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一年，是我毕业进入工作进步最快的一年，师兄的转岗让我必须独立面对，团队的动荡以及业务需求的井喷，让我承担了更多的事情
第一个团队，我们最开始只有区区5个人，2人陆续转岗，1人离职，我们第一个团队就这样解体了，作为我第一个加入的团队，给我的成长带来了很多。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;让我开始真正意义的编程，做实际的需求&lt;/li&gt;
  &lt;li&gt;让我熟悉阿里的一切&lt;/li&gt;
  &lt;li&gt;让我承担了更多，激发了我的潜能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第二个团队，也就是现在的团队，一个10左右的前端团队，让我们成为更加正规的前端团队，主管非常的负责，让我变得更加专业，让我学会了，如何去思考，&lt;font color=&quot;red&quot;&gt;思考拿结果，写总结，做规划&lt;/font&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-2&quot;&gt;关于个人&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一年，我疯狂的接需求，敲代码，完成了在别人甚至自己看来不可能完成的事情，上半年的绩效也得到了主管的认可，拿到了想要的结果，总结起来有以下优缺点
优点&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;支撑起大部分核心业务，得到大家的认可，建立起了威信&lt;/li&gt;
  &lt;li&gt;通过疯狂的做需求提升自己的能力&lt;/li&gt;
  &lt;li&gt;积极性极高，得到大家的好评&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;缺点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;技术钻研的不够深入&lt;/li&gt;
  &lt;li&gt;不管是对项目架构还是个人发展，没有做更深入的思考&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-3&quot;&gt;总结&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;总的来说，这一年的表现还是比较满意，如果满分10分，给自己打9分吧！希望17年能够争取拿到9.5分&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-4&quot;&gt;17展望&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;做到以下几点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;多思考，做好总结&lt;/li&gt;
  &lt;li&gt;加强对团队的贡献，包括工具，组件的贡献&lt;/li&gt;
  &lt;li&gt;成功晋升&lt;/li&gt;
  &lt;li&gt;涉猎更多的技术，深入研究某些方面，如nodejs&lt;/li&gt;
  &lt;li&gt;建立自己的博客，并坚持每周一篇高质量分享&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-5&quot;&gt;生活&lt;/h2&gt;
&lt;p&gt;生活方面，平淡无奇，大部分时间还是和彩利同学一起彼此照顾，一起愉快的玩耍，感谢彩利同学的陪伴和照顾&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-6&quot;&gt;关于学习&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;买了几本书都没有看完，倒是看完了几本彩利同学买的书&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;天才在左，疯子在右&lt;/li&gt;
  &lt;li&gt;追风筝的人&lt;/li&gt;
  &lt;li&gt;深入浅出nodejs看了一半&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-7&quot;&gt;关于旅行&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;4月份随团队去了青岛，一座美丽的海边城市，第一次接触真正的大海，非常赞的一段旅行
和彩利同学去了乌镇，一座有名的古镇，但是感觉比较一般，过于商业化了，而且去的时候人太多了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-8&quot;&gt;17展望&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;做到以下几点&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;多带彩利同学去旅行，至少5个城市&lt;/li&gt;
  &lt;li&gt;减肥，健身，至少瘦20斤&lt;/li&gt;
  &lt;li&gt;结婚，完成人生最为重要的一个仪式&lt;/li&gt;
  &lt;li&gt;看书，至少1月看一本&lt;/li&gt;
  &lt;li&gt;买车，买房&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;16已经圆满结束，17继续努力&lt;/p&gt;

&lt;p&gt;—— 后记于 2017.01.01&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jan 2017 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/01/hello-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/01/hello-2017/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
