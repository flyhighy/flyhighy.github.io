---
layout:     post
title:      "浅谈react"
subtitle:   " \"框架\""
date:       2017-02-19 12:00:00
author:     "hengfei"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 前端
---


要说近两年最火的技术一定是前端开发，而论前端最火的框架，我认为非react莫属
### react是什么？
> A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES

<font color="red">一个构建ui的JavaScript库</font>
这是facebook官方对react的解释，很多人认为fb的初衷已经很明确，react更倾向于ui的构建，不擅长或者不应该做较复杂的逻辑运算，而我认为ui及前端，前端也可以有复杂的逻辑，例如表单页面
其实react就是一个mvc的前端框架，一个比jquery更加高级的框架

### react的特点

* 函数式编程，jsx
  * 以往的理念基本都是html，css，js分离，减少js对dom的操作 而jsx语法的出现彻底颠覆这一理念，dom的渲染几乎完全通过js插入
  
* virtual dom
  * 了解前端的都知道，js操作dom是非常消耗性能的，所以要尽量避免这一操作，但是react的函数式编程恰恰与之相悖，所以为了减少对性能的消耗，virtual dom应景而生，通过这一算法大大提高react的性能，成为其成功的决定性因素之一
  
* 状态机
  * 状态机可以说是react的心脏，也就是mvc中的model，视图层的构建完全受其控制，新老状态机的数据的diff是virtual dom的基本原理
  
  
jsx，virtual dom，状态机这三者相辅相成，造就了react这一颠覆性的框架

### react成功的关键

如果说一个事物的存在必定有其存在的意义，那么成功的事物绝壁有极大地存在意义，react的成功就是因为其解决了前端几个极大的痛点

* 组件化
前端组件化的意义我相信每个做过系统前端的人都知道，想了解前端组件化，可以参考之前写过的[前端组件化的一点思考](http://flyhighly.com/2017/02/10/cmp/)这篇文章，react的函数式变成让组件分离变得更加简单，由于dom的渲染事件的绑定，以及css都在一个组件完成，使组件封装更加彻底，组件引用也更加简单

* 性能提升
  有人认为即使是有了virtual dom，react的性能也不可能比html渲染好，比较react无可避免的对dom操作
页面仅仅是html渲染那么简单吗？现在哪个页面或多或少没有些酷炫的交互，而这些交互无可避免要通过js实现，对于技术牛逼的开发，通过传统方式对一个的页面开发，可以将其性能做到极致，但是并不是每个开发都会将性能做到最好，而且对于一些复杂交互的页面及时做的极致，性能也不见得有多好，这是html，js分离的模式导致
react的出现可以减少前端性能优化的复杂度，大部分页面照着react常规的开发，性能都不会太差

* 开发体验的提升
js，htm，css的融合，使得页面开发不用在html，js，css文件来回切换，页面组件的拆分，引入也变得十分简单，前端开发的体验可谓是达到历史之最，这也是很多人对之着迷的原因

### 社区的发展

作为前端近两年社区最活跃的技术，基于react的工具，组件库的建设日渐完善，例如webpack打包最初也是为react量身定做，而组件库最有代表性的莫过于蚂蚁金服的[ant design](https://ant.design/index-cn)

### react的不足
人无完人，框架也没有完美的，react也有其不足之处
* 种子文件较大
相比于jquery，kissy等框架，react的种子文件体积显得有些庞大，这与其状态机的维护，dom的管理以及virtual dom算法有关，也是可以理解的，毕竟传统方式的事件绑定和dom操作，react框架都帮忙解决了

* 更加黑盒
react对于大部分开发者来说更像是一个黑盒，这样的有好有坏，好处是开发者不用关心react具体是怎么实现的，只需要编写上层的代码即可，坏处是不理解其原理无法做更深的性能优化，以及问题的排查

* 其他
例如组件间的通信数据共享必须通过redux等第三方库来解决，想想也没有更好的办法，因为组件间既要隔离又要通信，只能通过中间层

### 写在最后

react的出现让人眼前一亮，其颠覆性的创新也是令人大呼惊奇，可以想象未来必定有其他更好的前端框架出现，而我们要做的便是挣脱束缚，积极创新，并且拥抱新的东西，让自己保持竞争力。
  
  







—— 后记于 2017.02.19


